// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/contactcenterinsights/v1/resources.proto

package com.google.cloud.contactcenterinsights.v1;

/**
 * <pre>
 * Selector of all available annotators and phrase matchers to run.
 * </pre>
 *
 * Protobuf type {@code google.cloud.contactcenterinsights.v1.AnnotatorSelector}
 */
public final class AnnotatorSelector extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.cloud.contactcenterinsights.v1.AnnotatorSelector)
    AnnotatorSelectorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AnnotatorSelector.newBuilder() to construct.
  private AnnotatorSelector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AnnotatorSelector() {
    phraseMatchers_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    issueModels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AnnotatorSelector();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.contactcenterinsights.v1.ResourcesProto.internal_static_google_cloud_contactcenterinsights_v1_AnnotatorSelector_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.contactcenterinsights.v1.ResourcesProto.internal_static_google_cloud_contactcenterinsights_v1_AnnotatorSelector_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.contactcenterinsights.v1.AnnotatorSelector.class, com.google.cloud.contactcenterinsights.v1.AnnotatorSelector.Builder.class);
  }

  public static final int RUN_INTERRUPTION_ANNOTATOR_FIELD_NUMBER = 1;
  private boolean runInterruptionAnnotator_ = false;
  /**
   * <pre>
   * Whether to run the interruption annotator.
   * </pre>
   *
   * <code>bool run_interruption_annotator = 1;</code>
   * @return The runInterruptionAnnotator.
   */
  @java.lang.Override
  public boolean getRunInterruptionAnnotator() {
    return runInterruptionAnnotator_;
  }

  public static final int RUN_SILENCE_ANNOTATOR_FIELD_NUMBER = 2;
  private boolean runSilenceAnnotator_ = false;
  /**
   * <pre>
   * Whether to run the silence annotator.
   * </pre>
   *
   * <code>bool run_silence_annotator = 2;</code>
   * @return The runSilenceAnnotator.
   */
  @java.lang.Override
  public boolean getRunSilenceAnnotator() {
    return runSilenceAnnotator_;
  }

  public static final int RUN_PHRASE_MATCHER_ANNOTATOR_FIELD_NUMBER = 3;
  private boolean runPhraseMatcherAnnotator_ = false;
  /**
   * <pre>
   * Whether to run the active phrase matcher annotator(s).
   * </pre>
   *
   * <code>bool run_phrase_matcher_annotator = 3;</code>
   * @return The runPhraseMatcherAnnotator.
   */
  @java.lang.Override
  public boolean getRunPhraseMatcherAnnotator() {
    return runPhraseMatcherAnnotator_;
  }

  public static final int PHRASE_MATCHERS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList phraseMatchers_;
  /**
   * <pre>
   * The list of phrase matchers to run. If not provided, all active phrase
   * matchers will be used. If inactive phrase matchers are provided, they will
   * not be used. Phrase matchers will be run only if
   * run_phrase_matcher_annotator is set to true. Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * </pre>
   *
   * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
   * @return A list containing the phraseMatchers.
   */
  public com.google.protobuf.ProtocolStringList
      getPhraseMatchersList() {
    return phraseMatchers_;
  }
  /**
   * <pre>
   * The list of phrase matchers to run. If not provided, all active phrase
   * matchers will be used. If inactive phrase matchers are provided, they will
   * not be used. Phrase matchers will be run only if
   * run_phrase_matcher_annotator is set to true. Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * </pre>
   *
   * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
   * @return The count of phraseMatchers.
   */
  public int getPhraseMatchersCount() {
    return phraseMatchers_.size();
  }
  /**
   * <pre>
   * The list of phrase matchers to run. If not provided, all active phrase
   * matchers will be used. If inactive phrase matchers are provided, they will
   * not be used. Phrase matchers will be run only if
   * run_phrase_matcher_annotator is set to true. Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * </pre>
   *
   * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
   * @param index The index of the element to return.
   * @return The phraseMatchers at the given index.
   */
  public java.lang.String getPhraseMatchers(int index) {
    return phraseMatchers_.get(index);
  }
  /**
   * <pre>
   * The list of phrase matchers to run. If not provided, all active phrase
   * matchers will be used. If inactive phrase matchers are provided, they will
   * not be used. Phrase matchers will be run only if
   * run_phrase_matcher_annotator is set to true. Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * </pre>
   *
   * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
   * @param index The index of the value to return.
   * @return The bytes of the phraseMatchers at the given index.
   */
  public com.google.protobuf.ByteString
      getPhraseMatchersBytes(int index) {
    return phraseMatchers_.getByteString(index);
  }

  public static final int RUN_SENTIMENT_ANNOTATOR_FIELD_NUMBER = 5;
  private boolean runSentimentAnnotator_ = false;
  /**
   * <pre>
   * Whether to run the sentiment annotator.
   * </pre>
   *
   * <code>bool run_sentiment_annotator = 5;</code>
   * @return The runSentimentAnnotator.
   */
  @java.lang.Override
  public boolean getRunSentimentAnnotator() {
    return runSentimentAnnotator_;
  }

  public static final int RUN_ENTITY_ANNOTATOR_FIELD_NUMBER = 6;
  private boolean runEntityAnnotator_ = false;
  /**
   * <pre>
   * Whether to run the entity annotator.
   * </pre>
   *
   * <code>bool run_entity_annotator = 6;</code>
   * @return The runEntityAnnotator.
   */
  @java.lang.Override
  public boolean getRunEntityAnnotator() {
    return runEntityAnnotator_;
  }

  public static final int RUN_INTENT_ANNOTATOR_FIELD_NUMBER = 7;
  private boolean runIntentAnnotator_ = false;
  /**
   * <pre>
   * Whether to run the intent annotator.
   * </pre>
   *
   * <code>bool run_intent_annotator = 7;</code>
   * @return The runIntentAnnotator.
   */
  @java.lang.Override
  public boolean getRunIntentAnnotator() {
    return runIntentAnnotator_;
  }

  public static final int RUN_ISSUE_MODEL_ANNOTATOR_FIELD_NUMBER = 8;
  private boolean runIssueModelAnnotator_ = false;
  /**
   * <pre>
   * Whether to run the issue model annotator. A model should have already been
   * deployed for this to take effect.
   * </pre>
   *
   * <code>bool run_issue_model_annotator = 8;</code>
   * @return The runIssueModelAnnotator.
   */
  @java.lang.Override
  public boolean getRunIssueModelAnnotator() {
    return runIssueModelAnnotator_;
  }

  public static final int ISSUE_MODELS_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList issueModels_;
  /**
   * <pre>
   * The issue model to run. If not provided, the most recently deployed topic
   * model will be used. The provided issue model will only be used for
   * inference if the issue model is deployed and if run_issue_model_annotator
   * is set to true. If more than one issue model is provided, only the first
   * provided issue model will be used for inference.
   * </pre>
   *
   * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
   * @return A list containing the issueModels.
   */
  public com.google.protobuf.ProtocolStringList
      getIssueModelsList() {
    return issueModels_;
  }
  /**
   * <pre>
   * The issue model to run. If not provided, the most recently deployed topic
   * model will be used. The provided issue model will only be used for
   * inference if the issue model is deployed and if run_issue_model_annotator
   * is set to true. If more than one issue model is provided, only the first
   * provided issue model will be used for inference.
   * </pre>
   *
   * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
   * @return The count of issueModels.
   */
  public int getIssueModelsCount() {
    return issueModels_.size();
  }
  /**
   * <pre>
   * The issue model to run. If not provided, the most recently deployed topic
   * model will be used. The provided issue model will only be used for
   * inference if the issue model is deployed and if run_issue_model_annotator
   * is set to true. If more than one issue model is provided, only the first
   * provided issue model will be used for inference.
   * </pre>
   *
   * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
   * @param index The index of the element to return.
   * @return The issueModels at the given index.
   */
  public java.lang.String getIssueModels(int index) {
    return issueModels_.get(index);
  }
  /**
   * <pre>
   * The issue model to run. If not provided, the most recently deployed topic
   * model will be used. The provided issue model will only be used for
   * inference if the issue model is deployed and if run_issue_model_annotator
   * is set to true. If more than one issue model is provided, only the first
   * provided issue model will be used for inference.
   * </pre>
   *
   * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
   * @param index The index of the value to return.
   * @return The bytes of the issueModels at the given index.
   */
  public com.google.protobuf.ByteString
      getIssueModelsBytes(int index) {
    return issueModels_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (runInterruptionAnnotator_ != false) {
      output.writeBool(1, runInterruptionAnnotator_);
    }
    if (runSilenceAnnotator_ != false) {
      output.writeBool(2, runSilenceAnnotator_);
    }
    if (runPhraseMatcherAnnotator_ != false) {
      output.writeBool(3, runPhraseMatcherAnnotator_);
    }
    for (int i = 0; i < phraseMatchers_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, phraseMatchers_.getRaw(i));
    }
    if (runSentimentAnnotator_ != false) {
      output.writeBool(5, runSentimentAnnotator_);
    }
    if (runEntityAnnotator_ != false) {
      output.writeBool(6, runEntityAnnotator_);
    }
    if (runIntentAnnotator_ != false) {
      output.writeBool(7, runIntentAnnotator_);
    }
    if (runIssueModelAnnotator_ != false) {
      output.writeBool(8, runIssueModelAnnotator_);
    }
    for (int i = 0; i < issueModels_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 10, issueModels_.getRaw(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (runInterruptionAnnotator_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, runInterruptionAnnotator_);
    }
    if (runSilenceAnnotator_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, runSilenceAnnotator_);
    }
    if (runPhraseMatcherAnnotator_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, runPhraseMatcherAnnotator_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < phraseMatchers_.size(); i++) {
        dataSize += computeStringSizeNoTag(phraseMatchers_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getPhraseMatchersList().size();
    }
    if (runSentimentAnnotator_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, runSentimentAnnotator_);
    }
    if (runEntityAnnotator_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, runEntityAnnotator_);
    }
    if (runIntentAnnotator_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, runIntentAnnotator_);
    }
    if (runIssueModelAnnotator_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, runIssueModelAnnotator_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < issueModels_.size(); i++) {
        dataSize += computeStringSizeNoTag(issueModels_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getIssueModelsList().size();
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.contactcenterinsights.v1.AnnotatorSelector)) {
      return super.equals(obj);
    }
    com.google.cloud.contactcenterinsights.v1.AnnotatorSelector other = (com.google.cloud.contactcenterinsights.v1.AnnotatorSelector) obj;

    if (getRunInterruptionAnnotator()
        != other.getRunInterruptionAnnotator()) return false;
    if (getRunSilenceAnnotator()
        != other.getRunSilenceAnnotator()) return false;
    if (getRunPhraseMatcherAnnotator()
        != other.getRunPhraseMatcherAnnotator()) return false;
    if (!getPhraseMatchersList()
        .equals(other.getPhraseMatchersList())) return false;
    if (getRunSentimentAnnotator()
        != other.getRunSentimentAnnotator()) return false;
    if (getRunEntityAnnotator()
        != other.getRunEntityAnnotator()) return false;
    if (getRunIntentAnnotator()
        != other.getRunIntentAnnotator()) return false;
    if (getRunIssueModelAnnotator()
        != other.getRunIssueModelAnnotator()) return false;
    if (!getIssueModelsList()
        .equals(other.getIssueModelsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + RUN_INTERRUPTION_ANNOTATOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRunInterruptionAnnotator());
    hash = (37 * hash) + RUN_SILENCE_ANNOTATOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRunSilenceAnnotator());
    hash = (37 * hash) + RUN_PHRASE_MATCHER_ANNOTATOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRunPhraseMatcherAnnotator());
    if (getPhraseMatchersCount() > 0) {
      hash = (37 * hash) + PHRASE_MATCHERS_FIELD_NUMBER;
      hash = (53 * hash) + getPhraseMatchersList().hashCode();
    }
    hash = (37 * hash) + RUN_SENTIMENT_ANNOTATOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRunSentimentAnnotator());
    hash = (37 * hash) + RUN_ENTITY_ANNOTATOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRunEntityAnnotator());
    hash = (37 * hash) + RUN_INTENT_ANNOTATOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRunIntentAnnotator());
    hash = (37 * hash) + RUN_ISSUE_MODEL_ANNOTATOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRunIssueModelAnnotator());
    if (getIssueModelsCount() > 0) {
      hash = (37 * hash) + ISSUE_MODELS_FIELD_NUMBER;
      hash = (53 * hash) + getIssueModelsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.contactcenterinsights.v1.AnnotatorSelector prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Selector of all available annotators and phrase matchers to run.
   * </pre>
   *
   * Protobuf type {@code google.cloud.contactcenterinsights.v1.AnnotatorSelector}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.contactcenterinsights.v1.AnnotatorSelector)
      com.google.cloud.contactcenterinsights.v1.AnnotatorSelectorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.contactcenterinsights.v1.ResourcesProto.internal_static_google_cloud_contactcenterinsights_v1_AnnotatorSelector_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.contactcenterinsights.v1.ResourcesProto.internal_static_google_cloud_contactcenterinsights_v1_AnnotatorSelector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.contactcenterinsights.v1.AnnotatorSelector.class, com.google.cloud.contactcenterinsights.v1.AnnotatorSelector.Builder.class);
    }

    // Construct using com.google.cloud.contactcenterinsights.v1.AnnotatorSelector.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      runInterruptionAnnotator_ = false;
      runSilenceAnnotator_ = false;
      runPhraseMatcherAnnotator_ = false;
      phraseMatchers_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      runSentimentAnnotator_ = false;
      runEntityAnnotator_ = false;
      runIntentAnnotator_ = false;
      runIssueModelAnnotator_ = false;
      issueModels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000100);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.contactcenterinsights.v1.ResourcesProto.internal_static_google_cloud_contactcenterinsights_v1_AnnotatorSelector_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.contactcenterinsights.v1.AnnotatorSelector getDefaultInstanceForType() {
      return com.google.cloud.contactcenterinsights.v1.AnnotatorSelector.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.contactcenterinsights.v1.AnnotatorSelector build() {
      com.google.cloud.contactcenterinsights.v1.AnnotatorSelector result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.contactcenterinsights.v1.AnnotatorSelector buildPartial() {
      com.google.cloud.contactcenterinsights.v1.AnnotatorSelector result = new com.google.cloud.contactcenterinsights.v1.AnnotatorSelector(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.cloud.contactcenterinsights.v1.AnnotatorSelector result) {
      if (((bitField0_ & 0x00000008) != 0)) {
        phraseMatchers_ = phraseMatchers_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.phraseMatchers_ = phraseMatchers_;
      if (((bitField0_ & 0x00000100) != 0)) {
        issueModels_ = issueModels_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.issueModels_ = issueModels_;
    }

    private void buildPartial0(com.google.cloud.contactcenterinsights.v1.AnnotatorSelector result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.runInterruptionAnnotator_ = runInterruptionAnnotator_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.runSilenceAnnotator_ = runSilenceAnnotator_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.runPhraseMatcherAnnotator_ = runPhraseMatcherAnnotator_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.runSentimentAnnotator_ = runSentimentAnnotator_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.runEntityAnnotator_ = runEntityAnnotator_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.runIntentAnnotator_ = runIntentAnnotator_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.runIssueModelAnnotator_ = runIssueModelAnnotator_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.contactcenterinsights.v1.AnnotatorSelector) {
        return mergeFrom((com.google.cloud.contactcenterinsights.v1.AnnotatorSelector)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.contactcenterinsights.v1.AnnotatorSelector other) {
      if (other == com.google.cloud.contactcenterinsights.v1.AnnotatorSelector.getDefaultInstance()) return this;
      if (other.getRunInterruptionAnnotator() != false) {
        setRunInterruptionAnnotator(other.getRunInterruptionAnnotator());
      }
      if (other.getRunSilenceAnnotator() != false) {
        setRunSilenceAnnotator(other.getRunSilenceAnnotator());
      }
      if (other.getRunPhraseMatcherAnnotator() != false) {
        setRunPhraseMatcherAnnotator(other.getRunPhraseMatcherAnnotator());
      }
      if (!other.phraseMatchers_.isEmpty()) {
        if (phraseMatchers_.isEmpty()) {
          phraseMatchers_ = other.phraseMatchers_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensurePhraseMatchersIsMutable();
          phraseMatchers_.addAll(other.phraseMatchers_);
        }
        onChanged();
      }
      if (other.getRunSentimentAnnotator() != false) {
        setRunSentimentAnnotator(other.getRunSentimentAnnotator());
      }
      if (other.getRunEntityAnnotator() != false) {
        setRunEntityAnnotator(other.getRunEntityAnnotator());
      }
      if (other.getRunIntentAnnotator() != false) {
        setRunIntentAnnotator(other.getRunIntentAnnotator());
      }
      if (other.getRunIssueModelAnnotator() != false) {
        setRunIssueModelAnnotator(other.getRunIssueModelAnnotator());
      }
      if (!other.issueModels_.isEmpty()) {
        if (issueModels_.isEmpty()) {
          issueModels_ = other.issueModels_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureIssueModelsIsMutable();
          issueModels_.addAll(other.issueModels_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              runInterruptionAnnotator_ = input.readBool();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              runSilenceAnnotator_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              runPhraseMatcherAnnotator_ = input.readBool();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              ensurePhraseMatchersIsMutable();
              phraseMatchers_.add(s);
              break;
            } // case 34
            case 40: {
              runSentimentAnnotator_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              runEntityAnnotator_ = input.readBool();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 56: {
              runIntentAnnotator_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 64: {
              runIssueModelAnnotator_ = input.readBool();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureIssueModelsIsMutable();
              issueModels_.add(s);
              break;
            } // case 82
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private boolean runInterruptionAnnotator_ ;
    /**
     * <pre>
     * Whether to run the interruption annotator.
     * </pre>
     *
     * <code>bool run_interruption_annotator = 1;</code>
     * @return The runInterruptionAnnotator.
     */
    @java.lang.Override
    public boolean getRunInterruptionAnnotator() {
      return runInterruptionAnnotator_;
    }
    /**
     * <pre>
     * Whether to run the interruption annotator.
     * </pre>
     *
     * <code>bool run_interruption_annotator = 1;</code>
     * @param value The runInterruptionAnnotator to set.
     * @return This builder for chaining.
     */
    public Builder setRunInterruptionAnnotator(boolean value) {
      
      runInterruptionAnnotator_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to run the interruption annotator.
     * </pre>
     *
     * <code>bool run_interruption_annotator = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunInterruptionAnnotator() {
      bitField0_ = (bitField0_ & ~0x00000001);
      runInterruptionAnnotator_ = false;
      onChanged();
      return this;
    }

    private boolean runSilenceAnnotator_ ;
    /**
     * <pre>
     * Whether to run the silence annotator.
     * </pre>
     *
     * <code>bool run_silence_annotator = 2;</code>
     * @return The runSilenceAnnotator.
     */
    @java.lang.Override
    public boolean getRunSilenceAnnotator() {
      return runSilenceAnnotator_;
    }
    /**
     * <pre>
     * Whether to run the silence annotator.
     * </pre>
     *
     * <code>bool run_silence_annotator = 2;</code>
     * @param value The runSilenceAnnotator to set.
     * @return This builder for chaining.
     */
    public Builder setRunSilenceAnnotator(boolean value) {
      
      runSilenceAnnotator_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to run the silence annotator.
     * </pre>
     *
     * <code>bool run_silence_annotator = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunSilenceAnnotator() {
      bitField0_ = (bitField0_ & ~0x00000002);
      runSilenceAnnotator_ = false;
      onChanged();
      return this;
    }

    private boolean runPhraseMatcherAnnotator_ ;
    /**
     * <pre>
     * Whether to run the active phrase matcher annotator(s).
     * </pre>
     *
     * <code>bool run_phrase_matcher_annotator = 3;</code>
     * @return The runPhraseMatcherAnnotator.
     */
    @java.lang.Override
    public boolean getRunPhraseMatcherAnnotator() {
      return runPhraseMatcherAnnotator_;
    }
    /**
     * <pre>
     * Whether to run the active phrase matcher annotator(s).
     * </pre>
     *
     * <code>bool run_phrase_matcher_annotator = 3;</code>
     * @param value The runPhraseMatcherAnnotator to set.
     * @return This builder for chaining.
     */
    public Builder setRunPhraseMatcherAnnotator(boolean value) {
      
      runPhraseMatcherAnnotator_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to run the active phrase matcher annotator(s).
     * </pre>
     *
     * <code>bool run_phrase_matcher_annotator = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunPhraseMatcherAnnotator() {
      bitField0_ = (bitField0_ & ~0x00000004);
      runPhraseMatcherAnnotator_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList phraseMatchers_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensurePhraseMatchersIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        phraseMatchers_ = new com.google.protobuf.LazyStringArrayList(phraseMatchers_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @return A list containing the phraseMatchers.
     */
    public com.google.protobuf.ProtocolStringList
        getPhraseMatchersList() {
      return phraseMatchers_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @return The count of phraseMatchers.
     */
    public int getPhraseMatchersCount() {
      return phraseMatchers_.size();
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @param index The index of the element to return.
     * @return The phraseMatchers at the given index.
     */
    public java.lang.String getPhraseMatchers(int index) {
      return phraseMatchers_.get(index);
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the phraseMatchers at the given index.
     */
    public com.google.protobuf.ByteString
        getPhraseMatchersBytes(int index) {
      return phraseMatchers_.getByteString(index);
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @param index The index to set the value at.
     * @param value The phraseMatchers to set.
     * @return This builder for chaining.
     */
    public Builder setPhraseMatchers(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensurePhraseMatchersIsMutable();
      phraseMatchers_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @param value The phraseMatchers to add.
     * @return This builder for chaining.
     */
    public Builder addPhraseMatchers(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensurePhraseMatchersIsMutable();
      phraseMatchers_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @param values The phraseMatchers to add.
     * @return This builder for chaining.
     */
    public Builder addAllPhraseMatchers(
        java.lang.Iterable<java.lang.String> values) {
      ensurePhraseMatchersIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, phraseMatchers_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearPhraseMatchers() {
      phraseMatchers_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * </pre>
     *
     * <code>repeated string phrase_matchers = 4 [(.google.api.resource_reference) = { ... }</code>
     * @param value The bytes of the phraseMatchers to add.
     * @return This builder for chaining.
     */
    public Builder addPhraseMatchersBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensurePhraseMatchersIsMutable();
      phraseMatchers_.add(value);
      onChanged();
      return this;
    }

    private boolean runSentimentAnnotator_ ;
    /**
     * <pre>
     * Whether to run the sentiment annotator.
     * </pre>
     *
     * <code>bool run_sentiment_annotator = 5;</code>
     * @return The runSentimentAnnotator.
     */
    @java.lang.Override
    public boolean getRunSentimentAnnotator() {
      return runSentimentAnnotator_;
    }
    /**
     * <pre>
     * Whether to run the sentiment annotator.
     * </pre>
     *
     * <code>bool run_sentiment_annotator = 5;</code>
     * @param value The runSentimentAnnotator to set.
     * @return This builder for chaining.
     */
    public Builder setRunSentimentAnnotator(boolean value) {
      
      runSentimentAnnotator_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to run the sentiment annotator.
     * </pre>
     *
     * <code>bool run_sentiment_annotator = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunSentimentAnnotator() {
      bitField0_ = (bitField0_ & ~0x00000010);
      runSentimentAnnotator_ = false;
      onChanged();
      return this;
    }

    private boolean runEntityAnnotator_ ;
    /**
     * <pre>
     * Whether to run the entity annotator.
     * </pre>
     *
     * <code>bool run_entity_annotator = 6;</code>
     * @return The runEntityAnnotator.
     */
    @java.lang.Override
    public boolean getRunEntityAnnotator() {
      return runEntityAnnotator_;
    }
    /**
     * <pre>
     * Whether to run the entity annotator.
     * </pre>
     *
     * <code>bool run_entity_annotator = 6;</code>
     * @param value The runEntityAnnotator to set.
     * @return This builder for chaining.
     */
    public Builder setRunEntityAnnotator(boolean value) {
      
      runEntityAnnotator_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to run the entity annotator.
     * </pre>
     *
     * <code>bool run_entity_annotator = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunEntityAnnotator() {
      bitField0_ = (bitField0_ & ~0x00000020);
      runEntityAnnotator_ = false;
      onChanged();
      return this;
    }

    private boolean runIntentAnnotator_ ;
    /**
     * <pre>
     * Whether to run the intent annotator.
     * </pre>
     *
     * <code>bool run_intent_annotator = 7;</code>
     * @return The runIntentAnnotator.
     */
    @java.lang.Override
    public boolean getRunIntentAnnotator() {
      return runIntentAnnotator_;
    }
    /**
     * <pre>
     * Whether to run the intent annotator.
     * </pre>
     *
     * <code>bool run_intent_annotator = 7;</code>
     * @param value The runIntentAnnotator to set.
     * @return This builder for chaining.
     */
    public Builder setRunIntentAnnotator(boolean value) {
      
      runIntentAnnotator_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to run the intent annotator.
     * </pre>
     *
     * <code>bool run_intent_annotator = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunIntentAnnotator() {
      bitField0_ = (bitField0_ & ~0x00000040);
      runIntentAnnotator_ = false;
      onChanged();
      return this;
    }

    private boolean runIssueModelAnnotator_ ;
    /**
     * <pre>
     * Whether to run the issue model annotator. A model should have already been
     * deployed for this to take effect.
     * </pre>
     *
     * <code>bool run_issue_model_annotator = 8;</code>
     * @return The runIssueModelAnnotator.
     */
    @java.lang.Override
    public boolean getRunIssueModelAnnotator() {
      return runIssueModelAnnotator_;
    }
    /**
     * <pre>
     * Whether to run the issue model annotator. A model should have already been
     * deployed for this to take effect.
     * </pre>
     *
     * <code>bool run_issue_model_annotator = 8;</code>
     * @param value The runIssueModelAnnotator to set.
     * @return This builder for chaining.
     */
    public Builder setRunIssueModelAnnotator(boolean value) {
      
      runIssueModelAnnotator_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to run the issue model annotator. A model should have already been
     * deployed for this to take effect.
     * </pre>
     *
     * <code>bool run_issue_model_annotator = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunIssueModelAnnotator() {
      bitField0_ = (bitField0_ & ~0x00000080);
      runIssueModelAnnotator_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList issueModels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureIssueModelsIsMutable() {
      if (!((bitField0_ & 0x00000100) != 0)) {
        issueModels_ = new com.google.protobuf.LazyStringArrayList(issueModels_);
        bitField0_ |= 0x00000100;
       }
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @return A list containing the issueModels.
     */
    public com.google.protobuf.ProtocolStringList
        getIssueModelsList() {
      return issueModels_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @return The count of issueModels.
     */
    public int getIssueModelsCount() {
      return issueModels_.size();
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @param index The index of the element to return.
     * @return The issueModels at the given index.
     */
    public java.lang.String getIssueModels(int index) {
      return issueModels_.get(index);
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the issueModels at the given index.
     */
    public com.google.protobuf.ByteString
        getIssueModelsBytes(int index) {
      return issueModels_.getByteString(index);
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @param index The index to set the value at.
     * @param value The issueModels to set.
     * @return This builder for chaining.
     */
    public Builder setIssueModels(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureIssueModelsIsMutable();
      issueModels_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @param value The issueModels to add.
     * @return This builder for chaining.
     */
    public Builder addIssueModels(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureIssueModelsIsMutable();
      issueModels_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @param values The issueModels to add.
     * @return This builder for chaining.
     */
    public Builder addAllIssueModels(
        java.lang.Iterable<java.lang.String> values) {
      ensureIssueModelsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, issueModels_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearIssueModels() {
      issueModels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * </pre>
     *
     * <code>repeated string issue_models = 10 [(.google.api.resource_reference) = { ... }</code>
     * @param value The bytes of the issueModels to add.
     * @return This builder for chaining.
     */
    public Builder addIssueModelsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureIssueModelsIsMutable();
      issueModels_.add(value);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.contactcenterinsights.v1.AnnotatorSelector)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.contactcenterinsights.v1.AnnotatorSelector)
  private static final com.google.cloud.contactcenterinsights.v1.AnnotatorSelector DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.contactcenterinsights.v1.AnnotatorSelector();
  }

  public static com.google.cloud.contactcenterinsights.v1.AnnotatorSelector getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AnnotatorSelector>
      PARSER = new com.google.protobuf.AbstractParser<AnnotatorSelector>() {
    @java.lang.Override
    public AnnotatorSelector parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AnnotatorSelector> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AnnotatorSelector> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.contactcenterinsights.v1.AnnotatorSelector getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

